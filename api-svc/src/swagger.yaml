paths:
  /users:
    get:
      summary: Get all users
      description: Retrieves all users with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: string
          description: The page number
        - name: limit
          in: query
          schema:
            type: string
          description: The number of items per page
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                        example: 1
                      totalPages:
                        type: integer
                        example: 5
                      totalItems:
                        type: integer
                        example: 50
                  message:
                    type: string
                    example: success
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      security:
        - jwt: []

    post:
      summary: Create a new user
      description: Creates a new users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: User Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: find success
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal Server Error
      security:
        - jwt: []

    put:
      summary: Update user by ID
      description: Updates an existing user's email by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: update success
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal Server Error
      security:
        - jwt: []

    delete:
      summary: Delete user by ID
      description: Deletes a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: delete success
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal Server Error
      security:
        - jwt: []

  /auth/login:
    post:
      summary: Login a user
      description: Authenticates a user and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: login success
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: s12d3a45426614174000
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: secret123

    UserCreate:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: secret123

    UserUpdate:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: user@example.com

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
